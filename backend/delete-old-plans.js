const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function deleteOldPlans() {
  console.log('üóëÔ∏è  Suppression des anciens plans d\'abonnement...\n');

  try {
    // 1. Afficher tous les plans actuels
    const allPlans = await prisma.subscriptionPlan.findMany();
    console.log('üìã Plans actuellement en base de donn√©es:');
    allPlans.forEach(plan => {
      const status = plan.isActive ? '‚úÖ ACTIF' : '‚ùå INACTIF';
      console.log(`   ${status} - ${plan.name} (ID: ${plan.id}) - ${plan.priceCents / 100} ${plan.currency}`);
    });

    // 2. V√©rifier les abonnements actifs li√©s aux anciens plans
    console.log('\nüîç V√©rification des abonnements actifs...');
    const activeSubscriptions = await prisma.subscription.findMany({
      where: {
        status: 'ACTIVE',
        planId: { not: 'premium-plan' }
      },
      include: {
        plan: true,
        user: { select: { email: true, name: true } }
      }
    });

    if (activeSubscriptions.length > 0) {
      console.log(`\n‚ö†Ô∏è  ATTENTION: ${activeSubscriptions.length} abonnement(s) actif(s) li√©(s) aux anciens plans:`);
      activeSubscriptions.forEach(sub => {
        console.log(`   - ${sub.user.email}: Plan "${sub.plan.name}" (expire: ${sub.endAt.toLocaleDateString('fr-FR')})`);
      });

      // Migrer ces abonnements vers le plan Premium
      console.log('\nüîÑ Migration des abonnements actifs vers le plan Premium...');
      for (const sub of activeSubscriptions) {
        await prisma.subscription.update({
          where: { id: sub.id },
          data: { planId: 'premium-plan' }
        });
        console.log(`   ‚úÖ Abonnement de ${sub.user.email} migr√© vers Premium`);
      }
    } else {
      console.log('   ‚úÖ Aucun abonnement actif li√© aux anciens plans');
    }

    // 3. V√©rifier les paiements li√©s aux anciens plans
    console.log('\nüîç V√©rification des paiements...');
    const payments = await prisma.payment.findMany({
      where: {
        planId: { not: 'premium-plan' }
      }
    });

    if (payments.length > 0) {
      console.log(`   ‚ö†Ô∏è  ${payments.length} paiement(s) li√©(s) aux anciens plans`);
      console.log('   ‚ÑπÔ∏è  Ces paiements seront conserv√©s pour l\'historique');
    } else {
      console.log('   ‚úÖ Aucun paiement li√© aux anciens plans');
    }

    // 4. Supprimer tous les plans sauf Premium
    console.log('\nüóëÔ∏è  Suppression des anciens plans...');
    const deleteResult = await prisma.subscriptionPlan.deleteMany({
      where: {
        id: { not: 'premium-plan' }
      }
    });

    console.log(`   ‚úÖ ${deleteResult.count} plan(s) supprim√©(s)`);

    // 5. Afficher le r√©sultat final
    console.log('\nüìã Plans restants en base de donn√©es:');
    const remainingPlans = await prisma.subscriptionPlan.findMany();
    remainingPlans.forEach(plan => {
      const status = plan.isActive ? '‚úÖ ACTIF' : '‚ùå INACTIF';
      console.log(`   ${status} - ${plan.name} (ID: ${plan.id}) - ${plan.priceCents / 100} ${plan.currency}`);
      console.log(`      Fonctionnalit√©s: ${plan.features.join(', ')}`);
    });

    // 6. Statistiques finales
    console.log('\nüìä Statistiques:');
    const totalActiveSubscriptions = await prisma.subscription.count({
      where: { status: 'ACTIVE' }
    });
    console.log(`   - Abonnements actifs: ${totalActiveSubscriptions}`);
    console.log(`   - Plans disponibles: ${remainingPlans.length}`);
    console.log(`   - Type d'abonnement: ${remainingPlans[0].type}`);

    console.log('\n‚úÖ Nettoyage termin√© avec succ√®s!');
    console.log('‚ú® Il ne reste plus que le plan Premium √† 500 MRU/an\n');

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

deleteOldPlans();
